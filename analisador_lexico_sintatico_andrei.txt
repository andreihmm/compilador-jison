/* =======================================================
   Arquivo: trabalho_corrigido.jison
   Autor: Andrei Alves Fracalossi
   Descrição: Gramática Jison corrigida com funções, múltiplas
   variáveis e ponteiros.
   ======================================================= */



%lex
%%

\s+                      /* ignora espaços em branco */
"//".*                   /* ignora comentário de linha */

// Tipos
"int"    return 'INT_TYPE';
"float"  return 'FLOAT_TYPE';
"void"   return 'VOID_TYPE';

// Palavras reservadas
"if"                    return 'IF';
"else"                  return 'ELSE';
"while"                 return 'WHILE';
"do"                    return 'DO';
"for"                   return 'FOR';
"return"                return 'RETURN';
"print"                 return 'PRINT';

// Operadores múltiplos
"=="                    return 'EQ';
"!="                    return 'NE';
"<="                    return 'LE';
">="                    return 'GE';
"++"                    return 'INC';
"--"                    return 'DEC';

"&&"    return 'AND';
"||"  return 'OR';
"!"     return 'NOT';
"true"  return 'TRUE';
"false" return 'FALSE';

// Operadores simples
"="                     return '=';
"<"                     return '<';
">"                     return '>';
"+"                     return '+';
"-"                     return '-';
"*"                     return '*';
"/"                     return '/';

// Delimitadores
"("                     return '(';
")"                     return ')';
"{"                     return '{';
"}"                     return '}';
";"                     return ';';
","                     return ',';

// Literais
[0-9]+\.[0-9]+          yytext = parseFloat(yytext); return 'FLOAT';
[0-9]+                   yytext = Number(yytext); return 'NUM';
\"[^"]*\"               return 'STRING';
\'[^\']\'               return 'CHAR';

// Identificadores
[a-zA-Z_][a-zA-Z0-9_]*  return 'ID';

<<EOF>>                 return 'EOF';

/lex

%start programa

%%

programa
    : declaracoes EOF     { return $1; }
    ;

declaracoes
    : declaracoes declaracao        { $$ = $1.concat([$2]); }
    | declaracao                     { $$ = [$1]; }
    ;

declaracao
    : funcao
    | comando
    ;

tipo
    : INT_TYPE     { $$ = 'int'; }
    | FLOAT_TYPE   { $$ = 'float'; }
    | VOID_TYPE    { $$ = 'void'; }
    ;

funcao
    : tipo ID '(' parametros ')' '{' comandos '}' 
        { $$ = { funcao: $2, tipo: $1, params: $4, corpo: $7 }; }
    ;

parametros
    : parametro ',' parametros  { $$ = [$1].concat($3); }
    | parametro                 { $$ = [$1]; }
    | /* vazio */               { $$ = []; }
    ;

parametro
    : tipo ID                   { $$ = { tipo: $1, nome: $2 }; }
    ;

comandos
    : comandos comando { $$ = $1.concat([$2]); }
    | comando          { $$ = [$1]; }
    ;

declaracao_lista
    : declaracao_simples                     { $$ = [$1]; }
    | declaracao_simples ',' declaracao_lista { $$ = [$1].concat($3); }
    ;

declaracao_simples
    : ID                       { $$ = { ponteiro: false, nome: $1, valor: null }; }
    | ID '=' expressao          { $$ = { ponteiro: false, nome: $1, valor: $3 }; }
    | '*' ID                    { $$ = { ponteiro: true, nome: $2, valor: null }; }
    | '*' ID '=' expressao      { $$ = { ponteiro: true, nome: $2, valor: $4 }; }

    | ID ('=' expressao)? 
        { $$ = { ponteiro: false, nome: $1, valor: $2 ? $2[1] : null }; }
    | '*' ID ('=' expressao)? 
        { $$ = { ponteiro: true, nome: $2, valor: $3 ? $3[1] : null }; };


comando
    : tipo declaracao_lista ';'           { $$ = { decl: { tipo: $1, vars: $2 } }; }
    | ID '=' expressao ';'                { $$ = { atrib: $1, valor: $3 }; }
    | PRINT expressao ';'                 { $$ = { print: $2 }; }
    | RETURN expressao ';'                { $$ = { return: $2 }; }

    // IF simples com um comando
    | IF '(' expressao ')' comando        { $$ = { if: $3, then: $5 }; }

    // IF com ELSE, ambos comandos únicos
    | IF '(' expressao ')' comando ELSE comando
        { $$ = { if: $3, then: $5, else: $7 }; }

    // IF com THEN bloco e ELSE comando único
    | IF '(' expressao ')' '{' comandos '}' ELSE comando
        { $$ = { if: $3, then: $5, else: $8 }; }

    // IF com THEN bloco e ELSE bloco
    | IF '(' expressao ')' '{' comandos '}' ELSE '{' comandos '}'
        { $$ = { if: $3, then: $5, else: $9 }; }

    // IF com THEN comando único e ELSE bloco
    | IF '(' expressao ')' comando ELSE '{' comandos '}'
        { $$ = { if: $3, then: $5, else: $8 }; }

    // Bloco de comandos
    | '{' comandos '}'
        { $$ = $2; }
    ;


expressao
    : expressao '+' expressao   { $$ = $1 + $3; }
    | expressao '-' expressao   { $$ = $1 - $3; }
    | expressao '*' expressao   { $$ = $1 * $3; }
    | expressao '/' expressao   { $$ = $1 / $3; }

    // Comparações
    | expressao '<' expressao   { $$ = $1 < $3; }
    | expressao '>' expressao   { $$ = $1 > $3; }
    | expressao EQ expressao    { $$ = $1 == $3; }
    | expressao NE expressao    { $$ = $1 != $3; }
    | expressao LE expressao    { $$ = $1 <= $3; }
    | expressao GE expressao    { $$ = $1 >= $3; }

    // Operadores lógicos
    | expressao AND expressao   { $$ = $1 && $3; }
    | expressao OR expressao    { $$ = $1 || $3; }
    | NOT expressao             { $$ = !$2; }

    | NUM                       { $$ = $1; }
    | FLOAT                     { $$ = $1; }
    | CHAR                      { $$ = $1; }
    | STRING                    { $$ = $1; }
    | ID                        { $$ = $1; }
    ;
